import"../chunks/CWj6FrbW.js";import"../chunks/69_IOA4Y.js";import{b as ae,v as m,a5 as ue,a0 as ne,a as U,a1 as fe,av as H,F as re,J as W,a9 as ve,R as F,h as k,ah as ge,aw as me,D as _e,ax as xe,ay as we,az as be,aA as Te,d as le,z,Y as De,Z as ye,_ as J,l as O,k as V,e as q,A as Re,j as oe,B as ke,y as Ee,m as Se,w as Y,$ as Ce,s as T,f as L,q as S,r as C,aB as qe,aC as Ie,n as Ae}from"../chunks/CfSNqnEh.js";import{s as X}from"../chunks/D-KyLPO_.js";import{r as Le,i as G}from"../chunks/BH-SpmUd.js";import{e as Z,l as $e,t as $,a as D,m as je,j as Me,b as K,c as Q}from"../chunks/k3PStlUg.js";import{h as Ne}from"../chunks/CSexOY7A.js";import{a as Ge,s as Pe}from"../chunks/DbhpSHTX.js";import{C as Be}from"../chunks/S8weOODr.js";import{S as He}from"../chunks/CKKAmHVQ.js";import{S as Ve}from"../chunks/ywpRlVqr.js";function ee(r,e){return e}function ze(r,e,s,d){for(var f=[],p=e.length,l=0;l<p;l++)me(e[l].e,f,!0);var v=p>0&&f.length===0&&s!==null;if(v){var a=s.parentNode;_e(a),a.append(s),d.clear(),R(r,e[0].prev,e[p-1].next)}xe(f,()=>{for(var g=0;g<p;g++){var t=e[g];v||(d.delete(t.k),R(r,t.prev,t.next)),le(t.e,!v)}})}function te(r,e,s,d,f,p=null){var l=r,v={flags:e,items:new Map,first:null};k&&z();var a=null,g=!1,t=ue(()=>{var n=s();return De(n)?n:n==null?[]:re(n)});ae(()=>{var n=m(t),i=n.length;if(g&&i===0)return;g=i===0;let c=!1;if(k){var h=l.data===ye;h!==(i===0)&&(l=J(),O(l),V(!1),c=!0)}if(k){for(var x=null,w,o=0;o<i;o++){if(q.nodeType===8&&q.data===Re){l=q,c=!0,V(!1);break}var _=n[o],I=d(_,o);w=he(q,v,x,null,_,I,o,f,e,s),v.items.set(I,w),x=w}i>0&&O(J())}k||Oe(n,v,l,f,e,d,s),p!==null&&(i===0?a?ne(a):a=U(()=>p(l)):a!==null&&fe(a,()=>{a=null})),c&&V(!0),m(t)}),k&&(l=q)}function Oe(r,e,s,d,f,p,l){var v=r.length,a=e.items,g=e.first,t=g,n,i=null,c=[],h=[],x,w,o,_;for(_=0;_<v;_+=1){if(x=r[_],w=p(x,_),o=a.get(w),o===void 0){var I=t?t.e.nodes_start:s;i=he(I,e,i,i===null?e.first:i.next,x,w,_,d,f,l),a.set(w,i),c=[],h=[],t=i.next;continue}if(Ye(o,x,_),(o.e.f&H)!==0&&ne(o.e),o!==t){if(n!==void 0&&n.has(o)){if(c.length<h.length){var A=h[0],y;i=A.prev;var j=c[0],M=c[c.length-1];for(y=0;y<c.length;y+=1)se(c[y],A,s);for(y=0;y<h.length;y+=1)n.delete(h[y]);R(e,j.prev,M.next),R(e,i,j),R(e,M,A),t=A,i=M,_-=1,c=[],h=[]}else n.delete(o),se(o,t,s),R(e,o.prev,o.next),R(e,o,i===null?e.first:i.next),R(e,i,o),i=o;continue}for(c=[],h=[];t!==null&&t.k!==w;)(t.e.f&H)===0&&(n??(n=new Set)).add(t),h.push(t),t=t.next;if(t===null)continue;o=t}c.push(o),i=o,t=o.next}if(t!==null||n!==void 0){for(var E=n===void 0?[]:re(n);t!==null;)(t.e.f&H)===0&&E.push(t),t=t.next;var P=E.length;if(P>0){var B=null;ze(e,E,B,a)}}W.first=e.first&&e.first.e,W.last=i&&i.e}function Ye(r,e,s,d){ge(r.v,e),r.i=s}function he(r,e,s,d,f,p,l,v,a,g){var t=(a&be)!==0,n=(a&Te)===0,i=t?n?ve(f):F(f):f,c=(a&we)===0?l:F(l),h={i:c,v:i,k:p,a:null,e:null,prev:s,next:d};try{return h.e=U(()=>v(r,i,c,g),k),h.e.prev=s&&s.e,h.e.next=d&&d.e,s===null?e.first=h:(s.next=h,s.e.next=h.e),d!==null&&(d.prev=h,d.e.prev=h.e),h}finally{}}function se(r,e,s){for(var d=r.next?r.next.e.nodes_start:s,f=e?e.e.nodes_start:s,p=r.e.nodes_start;p!==d;){var l=oe(p);f.before(p),p=l}}function R(r,e,s){e===null?r.first=s:(e.next=s,e.e.next=s&&s.e),s!==null&&(s.prev=e,s.e.prev=e&&e.e)}function ie(r,e,s,d,f){var p=r,l="",v;ae(()=>{if(l===(l=e()??"")){k&&z();return}v!==void 0&&(le(v),v=void 0),l!==""&&(v=U(()=>{if(k){q.data;for(var a=z(),g=a;a!==null&&(a.nodeType!==8||a.data!=="");)g=a,a=oe(a);if(a===null)throw ke(),Ee;Z(q,g),p=O(a);return}var t=l+"",n=$e(t);Z(Se(n),n.lastChild),p.before(n)}))})}var Ue=$('<p class="svelte-1ci1e74"><b>Warning:</b> This is a preview feature and not yet available</p>');function We(r){var e=Ue();D(r,e)}var Fe=je('<svg><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><g><path d="M330.396,282.031L178.487,35.471c-2.504-4.074-6.96-6.555-11.736-6.555c-4.795,0-9.235,2.48-11.751,6.555L2.051,283.712 c-2.624,4.251-2.735,9.602-0.306,13.961c2.441,4.371,7.046,7.073,12.058,7.073h305.881c0.055-0.018,0.114-0.018,0.181,0 c7.62,0,13.799-6.19,13.799-13.799C333.669,287.543,332.438,284.445,330.396,282.031z M157.692,111.062h18.104v109.96h-18.104 V111.062z M175.695,261.243c-2.66,2.498-5.647,3.759-8.956,3.759c-3.303,0-6.285-1.261-8.948-3.759 c-2.651-2.534-3.978-5.579-3.978-9.182c0-3.585,1.261-6.629,3.774-9.157c2.504-2.511,5.554-3.771,9.152-3.771 c3.584,0,6.656,1.261,9.172,3.771c2.504,2.528,3.771,5.572,3.771,9.157C179.683,255.664,178.337,258.708,175.695,261.243z"></path></g></g></svg>');function Je(r,e){let s=Le(e,["$$slots","$$events","$$legacy","stroke"]);var d=Fe();let f;Y(()=>f=Ge(d,f,{...s,fill:e.stroke,version:"1.1",id:"Capa_1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 333.663 333.663","xml:space":"preserve"},void 0,!0)),D(r,d)}var Xe=$(`<pre>let text = "hello!"; # instance of Text
</pre>`),Ze=$("<h3>Example:</h3> <!>",1),Ke=$('<hr> <span class="svelte-jtwiq9"><!> <h2 class="svelte-jtwiq9"><code class="svelte-jtwiq9"> </code></h2> <button class="detail-button svelte-jtwiq9"><!></button></span> <!> <p><!></p> <!>',1),Qe=$('<hr> <h2 class="svelte-jtwiq9"><code class="svelte-jtwiq9"> </code></h2>',1),et=$(`<h1 id="text"><code class="svelte-jtwiq9">Text</code></h1> <p><code class="svelte-jtwiq9">Text</code> is Cabin's equivalent to <code class="svelte-jtwiq9">String</code> in most languages. It represents... well, text. <code class="svelte-jtwiq9">Text</code> is a group, but it's a special group that can't be instantiated with the standard <code class="svelte-jtwiq9">new</code> syntax; Instead, quoted text literals are used to instantiate it:</p> <!> <h2 id="properties">Properties</h2> <!> <hr> <h2 id="extensions">Extensions</h2> <!> <hr>`,1);function pt(r){const e=Ie([{signature:"bytes: action(this: This): Number",id:"bytes",shortDescription:"Gets the length of the string, in bytes.",longDescription:'Gets the length of the string, in bytes. To get the length of the string in graphemes, use <a href="#text-byte_count"><code>length()</code></a>.',example:`"hello!".length(); # 5
"😀😘😁".length(); # 6`,preview:!0,expanded:!1},{signature:"ends_with: action(this: This, pattern: This): Boolean",id:"ends_with",shortDescription:"Returns whether this text ends with the given suffix.",longDescription:"Returns whether this text ends with the givent suffix. If the given suffix is empty, this returns <code>true</code>, even if this text being checked is empty as well.",example:`"hello!".length(); # 5
"😀😘😁".length(); # 3`,preview:!0,expanded:!1},{signature:"length: action(this: This): Number",id:"length",shortDescription:"Gets the length of the string, in graphemes.",longDescription:'Gets the length of the string, in graphemes. Graphemes are what you can think of as a single "character", including regular ASCII characters, emojis, and other unicode characters; These all count as one unit in the length calculation. To get the length of the string in bytes, use <a href="#text-byte_count"><code>bytes()</code></a>.',example:`"hello!".length(); # 5
"😀😘😁".length(); # 3`,preview:!0,expanded:!1},{signature:"lines: action(this: This): List<This>",id:"lines",shortDescription:"Splits this text into lines.",longDescription:'Splits this text into lines. Equivalent to <code>text.split_where(["\\r", "\\n"])</code>',example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"replace: action(this: This, pattern: This, replacement: This): List<This>",id:"replace",shortDescription:"Replaces substrings with a given replacement.",longDescription:"Replaces all occurrences of <code>pattern</code> with <code>replacement</code>.",example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"split: action(this: This): List<This>",id:"split",shortDescription:"Splits this text by whitespace.",longDescription:"Splits this text by whitespace, returning the result as a list of substrings, without including the delimiters.",example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"split_any: action(this: This, delimiters: List<This>): List<This>",id:"split_any",shortDescription:"Splits this text by the given delimiters.",longDescription:"Splits this text by whitespace, returning the result as a list of substrings, without including the delimiters.",example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"starts_with: action(this: This, pattern: This): Boolean",id:"starts_with",shortDescription:"Returns whether this text starts with the given prefix.",longDescription:"Returns whether this text starts with the givent prefix. If the given prefix is empty, this returns <code>true</code>, even if this text being checked is empty as well.",example:`"hello!".length(); # 5
"😀😘😁".length(); # 3`,preview:!0,expanded:!1},{signature:"trim: action(this: This): This",id:"trim",shortDescription:"Removes whitespace from the beginning and end of this text.",longDescription:'Splits this text into lines. Equivalent to <code>text.split_where(["\\r", "\\n"])</code>',example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"trim_end: action(this: This): This",id:"trim_end",shortDescription:"Removes whitespace from the end of this text.",longDescription:'Removes all whitespace from the end of this text, as defined in <a href="https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt">the Unicode whitespace spec</a>. This includes spaces, tabs, newlines, carriage returns, and other unicode characters considered "whitespace". All such characters at the <i>end</i> of this text are removed.',example:'"  he was just 14    \\n\\r".trim_end(); # "  he was just 14"',preview:!0,expanded:!1},{signature:"trim_start: action(this: This): This",id:"trim_start",shortDescription:"Removes whitespace from the beginning of this text.",longDescription:'Splits this text into lines. Equivalent to <code>text.split_where(["\\r", "\\n"])</code>',example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1}]),s=[{signature:"extend Text tobe List<Letter>"},{signature:"extend Text tobe Addable"}];Ne(d=>{Ce.title="Standard Library  •  Cabin Docs"}),Ve(r,{page:"Text",children:(d,f)=>{var p=et(),l=T(L(p),4);He(l,{children:(g,t)=>{var n=Xe();D(g,n)}});var v=T(l,4);te(v,1,()=>m(e),ee,(g,t,n)=>{var i=Ke(),c=T(L(i),2),h=S(c);Je(h,{stroke:"#f9e2af",style:"width: 1rem; height: 1rem;"});var x=T(h,2),w=S(x),o=S(w,!0);C(w),C(x);var _=T(x,2);_.__click=()=>(m(t).expanded=!m(t).expanded,qe(()=>m(e)));var I=S(_);{var A=u=>{var b=K("Less");D(u,b)},y=u=>{var b=K("More");D(u,b)};G(I,u=>{m(t).expanded?u(A):u(y,!1)})}C(_),C(c);var j=T(c,2);{var M=u=>{We(u)};G(j,u=>{m(t).expanded&&m(t).preview&&u(M)})}var E=T(j,2),P=S(E);{var B=u=>{var b=Q(),N=L(b);ie(N,()=>m(t).longDescription),D(u,b)},de=u=>{var b=Q(),N=L(b);ie(N,()=>m(t).shortDescription),D(u,b)};G(P,u=>{m(t).expanded?u(B):u(de,!1)})}C(E);var ce=T(E,2);{var pe=u=>{var b=Ze(),N=T(L(b),2);Be(N,{get code(){return m(t).example}}),D(u,b)};G(ce,u=>{m(t).expanded&&u(pe)})}Y(()=>{Pe(x,"id",m(t).id),X(o,m(t).signature)}),D(g,i)});var a=T(v,6);te(a,1,()=>s,ee,(g,t)=>{var n=Qe(),i=T(L(n),2),c=S(i),h=S(c,!0);C(c),C(i),Y(()=>X(h,m(t).signature)),D(g,n)}),Ae(2),D(d,p)},$$slots:{default:!0}})}Me(["click"]);export{pt as component};
