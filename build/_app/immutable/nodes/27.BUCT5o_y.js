import"../chunks/CWj6FrbW.js";import"../chunks/69_IOA4Y.js";import{$ as Q,s as a,f as l,e as t,a0 as V,n as W,a1 as r,a2 as o,a3 as X,a4 as R}from"../chunks/CLrxCXow.js";import{s as k}from"../chunks/CIZb2PZr.js";import{i as m}from"../chunks/CyNiLqKD.js";import{e as I,i as C}from"../chunks/B9NT1f8I.js";import{S as P,h as q}from"../chunks/BSiG5n1N.js";import{e as Y,t as u,a as n,f as E,d as G}from"../chunks/DB0DeKnA.js";import{h as Z}from"../chunks/DR8CSxid.js";import{s as ee}from"../chunks/KYcJHdka.js";import{S as te}from"../chunks/C2lcDEqh.js";import{C as se,P as ie}from"../chunks/ZPXrRqZy.js";var ae=u("<h3>Example:</h3> <!>",1),ne=u('<hr> <span class="svelte-3bpcoh"><!> <h2 class="svelte-3bpcoh"><code class="svelte-3bpcoh"> </code></h2> <button class="detail-button svelte-3bpcoh"><!></button></span> <!> <p><!></p> <!>',1),re=u('<hr> <h2 class="svelte-3bpcoh"><code class="svelte-3bpcoh"> </code></h2>',1),oe=u(`<h1 id="text"><code class="svelte-3bpcoh">Text</code></h1> <p><code class="svelte-3bpcoh">Text</code> is Cabin's equivalent to <code class="svelte-3bpcoh">String</code> in most languages. It represents... well, text. <code class="svelte-3bpcoh">Text</code> is a group, but it's a special group that can't be instantiated with the standard <code class="svelte-3bpcoh">new</code> syntax; Instead, quoted text literals are used to instantiate it:</p> <!> <h2 id="properties">Properties</h2> <!> <hr> <h2 id="extensions">Extensions</h2> <!> <hr>`,1);function _e($){const w=V([{signature:"bytes: action(this: This): Number",id:"bytes",shortDescription:"Gets the length of the string, in bytes.",longDescription:'Gets the length of the string, in bytes. To get the length of the string in graphemes, use <a href="#text-byte_count"><code>length()</code></a>.',example:`"hello!".length(); # 5
"😀😘😁".length(); # 6`,preview:!0,expanded:!1},{signature:"ends_with: action(this: This, pattern: This): Boolean",id:"ends_with",shortDescription:"Returns whether this text ends with the given suffix.",longDescription:"Returns whether this text ends with the givent suffix. If the given suffix is empty, this returns <code>true</code>, even if this text being checked is empty as well.",example:`"hello!".length(); # 5
"😀😘😁".length(); # 3`,preview:!0,expanded:!1},{signature:"length: action(this: This): Number",id:"length",shortDescription:"Gets the length of the string, in graphemes.",longDescription:'Gets the length of the string, in graphemes. Graphemes are what you can think of as a single "character", including regular ASCII characters, emojis, and other unicode characters; These all count as one unit in the length calculation. To get the length of the string in bytes, use <a href="#text-byte_count"><code>bytes()</code></a>.',example:`"hello!".length(); # 5
"😀😘😁".length(); # 3`,preview:!0,expanded:!1},{signature:"lines: action(this: This): List<This>",id:"lines",shortDescription:"Splits this text into lines.",longDescription:'Splits this text into lines. Equivalent to <code>text.split_where(["\\r", "\\n"])</code>',example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"replace: action(this: This, pattern: This, replacement: This): List<This>",id:"replace",shortDescription:"Replaces substrings with a given replacement.",longDescription:"Replaces all occurrences of <code>pattern</code> with <code>replacement</code>.",example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"split: action(this: This): List<This>",id:"split",shortDescription:"Splits this text by whitespace.",longDescription:"Splits this text by whitespace, returning the result as a list of substrings, without including the delimiters.",example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"split_any: action(this: This, delimiters: List<This>): List<This>",id:"split_any",shortDescription:"Splits this text by the given delimiters.",longDescription:"Splits this text by whitespace, returning the result as a list of substrings, without including the delimiters.",example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"starts_with: action(this: This, pattern: This): Boolean",id:"starts_with",shortDescription:"Returns whether this text starts with the given prefix.",longDescription:"Returns whether this text starts with the givent prefix. If the given prefix is empty, this returns <code>true</code>, even if this text being checked is empty as well.",example:`"hello!".length(); # 5
"😀😘😁".length(); # 3`,preview:!0,expanded:!1},{signature:"trim: action(this: This): This",id:"trim",shortDescription:"Removes whitespace from the beginning and end of this text.",longDescription:'Splits this text into lines. Equivalent to <code>text.split_where(["\\r", "\\n"])</code>',example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"trim_end: action(this: This): This",id:"trim_end",shortDescription:"Removes whitespace from the end of this text.",longDescription:'Removes all whitespace from the end of this text, as defined in <a href="https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt">the Unicode whitespace spec</a>. This includes spaces, tabs, newlines, carriage returns, and other unicode characters considered "whitespace". All such characters at the <i>end</i> of this text are removed.',example:'"  he was just 14    \\n\\r".trim_end(); # "  he was just 14"',preview:!0,expanded:!1},{signature:"trim_start: action(this: This): This",id:"trim_start",shortDescription:"Removes whitespace from the beginning of this text.",longDescription:'Splits this text into lines. Equivalent to <code>text.split_where(["\\r", "\\n"])</code>',example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1}]),j=[{signature:"extend Text tobe List<Letter>"},{signature:"extend Text tobe Addable"}];Z(_=>{Q.title="Standard Library  •  Cabin Docs"}),te($,{page:"Text",children:(_,he)=>{var T=oe(),D=a(l(T),4);P(D,{language:"cabin",code:`
			let text = "hello!"; # instance of Text
		`});var S=a(D,4);I(S,1,()=>t(w),C,(x,s,v)=>{var c=ne(),h=a(l(c),2),d=r(h);se(d,{stroke:"#cba6f7",style:"width: 1rem; height: 1rem;"});var g=a(d,2),y=r(g),B=r(y,!0);o(y),o(g);var f=a(g,2);f.__click=()=>(t(s).expanded=!t(s).expanded,X(()=>t(w)));var N=r(f);{var U=e=>{var i=E("Less");n(e,i)},M=e=>{var i=E("More");n(e,i)};m(N,e=>{t(s).expanded?e(U):e(M,!1)})}o(f),o(h);var L=a(h,2);{var z=e=>{ie(e)};m(L,e=>{t(s).expanded&&t(s).preview&&e(z)})}var b=a(L,2),F=r(b);{var H=e=>{var i=G(),p=l(i);q(p,()=>t(s).longDescription),n(e,i)},J=e=>{var i=G(),p=l(i);q(p,()=>t(s).shortDescription),n(e,i)};m(F,e=>{t(s).expanded?e(H):e(J,!1)})}o(b);var K=a(b,2);{var O=e=>{var i=ae(),p=a(l(i),2);P(p,{language:"cabin",get code(){return t(s).example}}),n(e,i)};m(K,e=>{t(s).expanded&&e(O)})}R(()=>{ee(g,"id",t(s).id),k(B,t(s).signature)}),n(x,c)});var A=a(S,6);I(A,1,()=>j,C,(x,s)=>{var v=re(),c=a(l(v),2),h=r(c),d=r(h,!0);o(h),o(c),R(()=>k(d,t(s).signature)),n(x,v)}),W(2),n(_,T)}})}Y(["click"]);export{_e as component};
