import"../chunks/CWj6FrbW.js";import{s as e,c as t,t as B,r,$ as Te,f as E,w as x,a4 as q,n as h,v as ze,u as $e}from"../chunks/BydpiCg8.js";import{n as se,a as v,t as f,e as Ie}from"../chunks/Dt90oPg1.js";import{h as Pe}from"../chunks/Bn7yGRp9.js";import{s as ie,a as m}from"../chunks/7hxTxg94.js";import{s as a}from"../chunks/Bdb55mjI.js";import{r as le,p as Se}from"../chunks/DUNso-JU.js";import{D as Re}from"../chunks/BzOU4ukw.js";import{S as y}from"../chunks/CShp_DQN.js";import{C as Me}from"../chunks/DZNc80e9.js";import{W as Le}from"../chunks/NexWjSd_.js";import{s as je}from"../chunks/svERD4hu.js";const He=""+new URL("../assets/windows.DRwY9kpx.png",import.meta.url).href,Ae=""+new URL("../assets/mac.LENrtIPb.png",import.meta.url).href,Ve=""+new URL("../assets/linux.UfK4sZQY.png",import.meta.url).href,Ne=""+new URL("../assets/visual_studio_code.Be83qqBg.png",import.meta.url).href,Oe=""+new URL("../assets/neovim.xdbsRCpn.png",import.meta.url).href,Ue=""+new URL("../assets/vim.Q396DNj2.png",import.meta.url).href,Ge=""+new URL("../assets/zed.C-EANG1l.png",import.meta.url).href,De=""+new URL("../assets/unknown.CcoluJVG.png",import.meta.url).href;var Ee=se('<svg><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path d="M14.5 19.5H9.5M14.5 19.5C14.5 18.7865 14.5 18.4297 14.5381 18.193C14.6609 17.4296 14.6824 17.3815 15.1692 16.7807C15.3201 16.5945 15.8805 16.0927 17.0012 15.0892C18.5349 13.7159 19.5 11.7206 19.5 9.5C19.5 8.62341 19.3496 7.78195 19.0732 7M14.5 19.5C14.5 20.4346 14.5 20.9019 14.299 21.25C14.1674 21.478 13.978 21.6674 13.75 21.799C13.4019 22 12.9346 22 12 22C11.0654 22 10.5981 22 10.25 21.799C10.022 21.6674 9.83261 21.478 9.70096 21.25C9.5 20.9019 9.5 20.4346 9.5 19.5M9.5 19.5C9.5 18.7865 9.5 18.4297 9.46192 18.193C9.3391 17.4296 9.31762 17.3815 8.83082 16.7807C8.67987 16.5945 8.11945 16.0927 6.99876 15.0892C5.4651 13.7159 4.5 11.7206 4.5 9.5C4.5 5.35786 7.85786 2 12 2C13.3637 2 14.6423 2.36394 15.7442 3" stroke-width="1.5" stroke-linecap="round"></path><path d="M12.7857 8.5L10.6428 11.5H13.6428L11.5 14.5" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></g></svg>');function qe(_,u){let g=le(u,["$$slots","$$events","$$legacy","stroke"]);var l=Ee();let c;var w=e(t(l),2),d=t(w),C=e(d);r(w),r(l),B(()=>{c=ie(l,c,{...g,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},void 0,!0),m(d,"stroke",u.stroke),m(C,"stroke",u.stroke)}),v(_,l)}var Be=f('<p class="svelte-15c9yac"><!> <span class="svelte-15c9yac"><b>Tip:</b> <span class="content svelte-15c9yac"><!></span></span></p>');function Fe(_,u){var g=Be(),l=t(g);qe(l,{stroke:"#11111b",style:"width: 1rem;"});var c=e(l,2),w=e(t(c),2),d=t(w);je(d,()=>u.children),r(w),r(c),r(g),v(_,g)}var We=se('<svg><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><g id="Interface / External_Link"><path id="Vector" d="M10.0002 5H8.2002C7.08009 5 6.51962 5 6.0918 5.21799C5.71547 5.40973 5.40973 5.71547 5.21799 6.0918C5 6.51962 5 7.08009 5 8.2002V15.8002C5 16.9203 5 17.4801 5.21799 17.9079C5.40973 18.2842 5.71547 18.5905 6.0918 18.7822C6.5192 19 7.07899 19 8.19691 19H15.8031C16.921 19 17.48 19 17.9074 18.7822C18.2837 18.5905 18.5905 18.2839 18.7822 17.9076C19 17.4802 19 16.921 19 15.8031V14M20 9V4M20 4H15M20 4L13 11" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></g></g></svg>');function Ye(_,u){let g=le(u,["$$slots","$$events","$$legacy","stroke"]);var l=We();let c;var w=e(t(l),2),d=t(w),C=t(d);r(d),r(w),r(l),B(()=>{c=ie(l,c,{...g,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},void 0,!0),m(C,"stroke",u.stroke)}),v(_,l)}var Je=f("<div><span>cargo</span> <span>install</span> <span>cabin-language</span></div>"),Qe=f(`Don't have cargo? Install Rust with <a href="https://www.rust-lang.org/tools/install" class="svelte-zrwnm4">the instructions on the official Rust website</a> . <!>`,1),Ze=f("<span>cabin</span>"),Ke=f(`<pre>The Cabin compiler.

<b>Usage:</b> <span>cabin</span> <span>&lt;COMMAND&gt;</span> <span>[ARGUMENTS]</span> <span>[OPTIONS]</span>

<b>Commands:</b>
    <span>new</span>            Create a new Cabin project
    <span>run</span>            Run a Cabin project 
    <span>build</span>          Build a Cabin project into a native executable without running it
    <span>check</span>          Check a Cabin project for compile-time errors without building it
    <span>format</span>         Format a Cabin file or project
    <span>test</span>           Run tests in a Cabin project
    <span>set</span>            Configure a compiler flag
    <span>add</span>            Add an external library
    <span>remove</span>         Remove an external library
    <span>publish</span>        Publish a Cabin library

<b>Options: </b>
    <span>-h, --help</span>     Print help
</pre>`),Xe=f(`<pre>(PATHS=($&lbrace;PATH//:/ &rbrace;) ; IFS=$'\\n' ; echo "$&lbrace;PATHS[*]&rbrace;") | grep &bsol;&bsol;bcabin&bsol;&bsol;b || echo "Cabin is not in PATH!"
</pre>`),ea=f('<pre>export PATH="$PATH:/home/user/.programs"</pre>'),aa=f("<div><span>cargo</span> <span>install</span> <span>cabin-language</span></div>"),ta=f("<div><span>git</span> <span>clone</span> <span>https://github.com/cabin-language/cabin.git</span></div> <div><span>cd</span> <span>cabin/crates/cabin-bin</span></div> <div><span>cargo</span> <span>build</span> <span>--release</span></div>",1),ra=f(`<pre>Checks for diagnostics in a Cabin project.

<b>Usage:</b> <span>cabin check</span> <span>[OPTIONS]</span>

<b>Options:</b>

    <span>--format</span>: "readable" | "json" = "readable"

        The output format for the diagnostics. If the value is set to "readable" the outputs will 
        be pretty-printed with a code snippet showing the location of the diagnostic. If the value
        set to "json", a JSON array of diagnostics will be returned with the structure:

        &lbrace; diagnostics: &lbrace; file: string, line: int, column: int, message: string, severity: string &rbrace;[] &rbrace;

        For example, an example output is:

        &lbrace;"diagnostics":[&lbrace;"file":"/home/jazz/projects/example/src/main.cabin","line":10,"column":4,"message":"Type Mismatch: This value cannot be assigned to this type.","severity","error"&rbrace;]&rbrace;

        "severity" will always be either "error", "warning", "info", or "hint".
		</pre>`),na=f(`<h1>Installation</h1> <span class="os-buttons svelte-zrwnm4"><button class="svelte-zrwnm4"><img class="svelte-zrwnm4"> Windows</button> <button class="svelte-zrwnm4"><img class="svelte-zrwnm4"> Mac</button> <button class="svelte-zrwnm4"><img class="svelte-zrwnm4"> Linux</button></span> <p>Cabin can be installed through <code>cargo</code> :</p> <!> <!> <h2 id="testing">Testing</h2> <p>Once Cabin is installed, you can test that it's working with the <code>cabin</code> command:</p> <!> <p>If all goes well, you should see an output like this:</p> <!> <p>If you got an error instead, read on for troubleshooting tips. Otherwise, continue on to the
		documentation!</p> <h2 id="troubleshooting">Troubleshooting</h2> <p>So you got an error&mdash;Oh no! It's not your fault, and these cases are rare, but occasionally
		bugs in build scripts or installation scripts slip through the cracks. Let's work through it.</p> <p>If running <code>cabin</code> gives an error, make sure that the installation location is in your <code>PATH</code> environment variable. The following bash code will print the location of the Cabin executable on
		your system if it exists, and if it doesn't, will let you know*:</p> <!> <p class="note svelte-zrwnm4">*Note: requires <a href="https://www.gnu.org/software/coreutils/" class="svelte-zrwnm4">GNU Coreutils</a> (present on most Unix systems by default)</p> <p>If you get an error here, it means that the Cabin compiler either doesn't exist on your
		computer, or it does but it's in a location somewhere that isnt in your <code>PATH</code> variable. If you know that you have the compiler and where it is (it'll just be a file called <code>cabin</code> ), then add its parent directory to your <code>PATH</code> ; i.e., if your Cabin compiler is located at <code>/home/user/.programs/cabin</code> , then in your <code>~/.bashrc</code> , you'd add:</p> <!> <p>Alternatively, if you're not sure whether the compiler is on your system, or you think it might
		be but you don't know where, consider trying the installation for your operating system above.
		Make sure the operating system selected matches your machine; The website will try to
		auto-detect it, but it doesn't hurt to double check, especially when it comes to Linux distros.</p> <p>If you're <i>still</i> having trouble with your installation, fear not! Two more options remain. For both, you need to have
		Rust installed. Check if Rust is installed by running <code>cargo</code> , and if it's not, install it with the instructions <a href="https://www.rust-lang.org/tools/install" class="svelte-zrwnm4">here</a> .</p> <p>The first option is to install the compiler through it's cargo crate. This may have already been
		the instructions for your operating system if no native solution exists. If not, you can try it
		like so:</p> <!> <p>If that's causing you trouble, the last thing you can try is building the compiler from source.
		That'd look something like this:</p> <!> <p>The compiler executable will be placed at <code>cabin/crates/cabin-bin/target/release/cabin</code> when the project finishes compiling. Place the file anywhere in your <code>PATH</code> , using the <code>PATH</code> instructions and debugging tips above if necessary.</p> <p>If you've gotten this far and are <i>still</i> having trouble getting the compiler working on your machine, first of all, congratulations for being
		the most incredibly unlucky person alive, and secondly, feel free to reach out to the Cabin community
		to get advice on your situation. You can <a href="https://github.com/cabin-language/cabin/issues" class="svelte-zrwnm4">submit an issue on the Cabin GitHub repository</a> , ask questions in <a href="/community" class="svelte-zrwnm4">the Cabin Discord server</a> , or <a href="/community" class="svelte-zrwnm4">reach out to the community in other ways</a> . Try to be descriptive about what you've tried that hasn't worked, what error messages (if any)
		you've received, and what you're confused on or struggling with.</p> <h2 id="editor-setup">Editor Setup</h2> <p>Cabin is supported in many popular text editors with extensions and plugins. Choose your editor
		below to get set up.</p> <h2 class="editor svelte-zrwnm4"><img alt="Visual Studio Code" class="svelte-zrwnm4"> Visual Studio Code</h2> <h2 class="editor svelte-zrwnm4"><img alt="Vim" class="svelte-zrwnm4"> Vim</h2> <h2 class="editor svelte-zrwnm4"><img alt="Neovim" class="svelte-zrwnm4"> Neovim</h2> <div class="svelte-zrwnm4"><p>Currently, the best support for Cabin in Neovim is provided through the <a href="https://github.com/cabin-language/cabin.nvim" class="svelte-zrwnm4">cabin.nvim</a> plugin. The plugin will automatically set up filetype detection, nerd font icons, install and set
			up the <a href="https://github.com/cabin-language/cabin/tree/main/crates/cabin-language-server" class="svelte-zrwnm4">cabin language server</a> , as well as the <a href="https://github.com/cabin-language/cabin/tree/main/crates/cabin-language-server" class="svelte-zrwnm4">cabin tree-sitter parser</a> for semantic highlighting.</p> <h3>Installation</h3> <b>💤 lazy.nvim</b> <!> <h3><!> Future Deprecation Warning</h3> <p>This plugin may be deprecated in the future if the following criteria are met:</p> <ul><li><input type="checkbox" disabled> Cabin is registered as a <a href="https://neovim.io/doc/user/filetype.html#_3.-docs-for-the-default-filetype-plugins." class="svelte-zrwnm4">default filetype</a></li> <li><input type="checkbox" disabled> Cabin has an icon registered in <a href="https://github.com/nvim-tree/nvim-web-devicons" class="svelte-zrwnm4">nvim-web-devicons</a></li> <li><input type="checkbox" disabled> The <a href="https://github.com/cabin-language/cabin/tree/main/crates/cabin-language-server" class="svelte-zrwnm4">cabin language server</a> is available through <a href="https://github.com/williamboman/mason.nvim" class="svelte-zrwnm4">mason.nvim</a></li> <li><input type="checkbox" disabled> The cabin tree-sitter parser is available through <a href="https://github.com/nvim-tree-sitter/nvim-tree-sitter" class="svelte-zrwnm4">nvim-tree-sitter</a></li></ul></div> <h2 class="editor svelte-zrwnm4"><img alt="Neovim" class="svelte-zrwnm4"> Zed</h2> <h2 class="editor svelte-zrwnm4"><img alt="Other" class="svelte-zrwnm4"> Other</h2> <div class="svelte-zrwnm4"><p>If you're using an editor that isn't listed here, you can use the tools Cabin provides with
			your editor-specific setup.</p> <h3>Highlighting</h3> <p>Cabin offers a number of highlighting solutions depending on what your editor supports:</p> <ul><li><b>Tree-Sitter:</b> The Cabin Tree-Sitter grammar and parser, along with its accompanying highlight queries, can
				be used to highlight code in an editor that supports Tree-Sitter highlighting.</li> <li><b>TextMate:</b> There also exists a Cabin TextMate grammar that can be used by editors that utilize TextMate
				grammars for syntax highlighting.</li></ul> <h3>Diagnostics</h3> <p>There are multiple ways to get live diagnostics for your Cabin code in real-time in an editor:</p> <ul><li><b>Language Server Protocol:</b> Cabin has a language server that provides a server-side implementation of Microsoft's language
				server protocol. Many editors use this as a unified way to communicate with languages about diagnostics,
				among other features.</li> <li><b>Compiler Invocation:</b> The Cabin compiler can check a program and output diagnostics in a number of formats; If you
				can invoke the compiler and parse the result from your editor, you can convert them into your
				editor-specific diagnostic format:</li></ul> <!></div>`,1);function ma(_){let u=ze("windows");function g(c){return function(){$e(u,Se(c))}}function l(c){let d=c.target.nextElementSibling.style;d.display=d.display==="flex"?"none":"flex"}Pe(c=>{Te.title="Installation • Cabin Docs"}),Re(_,{page:"Installation",children:(c,w)=>{var d=na(),C=e(E(d),2),T=t(C),ce=q(()=>g("windows"));T.__click=function(...o){var s;(s=x(ce))==null||s.apply(this,o)};var pe=t(T);m(pe,"src",He),h(),r(T);var z=e(T,2),he=q(()=>g("mac"));z.__click=function(...o){var s;(s=x(he))==null||s.apply(this,o)};var ue=t(z);m(ue,"src",Ae),h(),r(z);var R=e(z,2),de=q(()=>g("linux"));R.__click=function(...o){var s;(s=x(de))==null||s.apply(this,o)};var ve=t(R);m(ve,"src",Ve),h(),r(R),r(C);var F=e(C,4);y(F,{children:(o,s)=>{var n=Je(),i=t(n);a(i,"color","#89b4fa");var p=e(i,2);a(p,"color","#89b4fa");var b=e(p,2);a(b,"color","#f38ba8"),r(n),v(o,n)}});var W=e(F,2);Fe(W,{children:(o,s)=>{h();var n=Qe(),i=e(E(n),3);Ye(i,{stroke:"#11111b"}),v(o,n)}});var Y=e(W,6);y(Y,{children:(o,s)=>{var n=Ze();a(n,"color","#89b4fa"),v(o,n)}});var J=e(Y,4);y(J,{children:(o,s)=>{var n=Ke(),i=e(t(n),3);a(i,"color","#89b4fa");var p=e(i,2);a(p,"color","#89b4fa");var b=e(p,2);a(b,"color","#f38ba8");var H=e(b,2);a(H,"color","#9399b2");var k=e(H,4);a(k,"color","#89b4fa");var $=e(k,2);a($,"color","#89b4fa");var A=e($,2);a(A,"color","#89b4fa");var I=e(A,2);a(I,"color","#89b4fa");var P=e(I,2);a(P,"color","#89b4fa");var S=e(P,2);a(S,"color","#89b4fa");var V=e(S,2);a(V,"color","#89b4fa");var re=e(V,2);a(re,"color","#89b4fa");var ne=e(re,2);a(ne,"color","#89b4fa");var oe=e(ne,2);a(oe,"color","#89b4fa");var xe=e(oe,4);a(xe,"color","#9399b2"),h(),r(n),v(o,n)}});var Q=e(J,10);y(Q,{children:(o,s)=>{var n=Xe();v(o,n)}});var Z=e(Q,6);y(Z,{children:(o,s)=>{var n=ea();v(o,n)}});var N=e(Z,4),be=e(t(N),5);a(be,"color","dodgerblue"),h(),r(N);var K=e(N,4);y(K,{children:(o,s)=>{var n=aa(),i=t(n);a(i,"color","#89b4fa");var p=e(i,2);a(p,"color","#89b4fa");var b=e(p,2);a(b,"color","#f38ba8"),r(n),v(o,n)}});var X=e(K,4);y(X,{children:(o,s)=>{var n=ta(),i=E(n),p=t(i);a(p,"color","#89b4fa");var b=e(p,2);a(b,"color","#89b4fa");var H=e(b,2);a(H,"color","#f38ba8"),r(i);var k=e(i,2),$=t(k);a($,"color","#89b4fa");var A=e($,2);a(A,"color","#f38ba8"),r(k);var I=e(k,2),P=t(I);a(P,"color","#89b4fa");var S=e(P,2);a(S,"color","#89b4fa");var V=e(S,2);a(V,"color","#9399b2"),r(I),v(o,n)}});var O=e(X,10),ge=t(O);m(ge,"src",Ne),h(),r(O);var U=e(O,2),me=t(U);m(me,"src",Ue),h(),r(U);var M=e(U,2);M.__click=l;var fe=t(M);m(fe,"src",Oe),h(),r(M);var G=e(M,2),ee=e(t(G),6);Me(ee,{language:"lua",code:`
			{
				"cabin-language/cabin.nvim",
				dependencies = { "nvim-tree/nvim-web-devicons" }, -- optional
				opts = {}
			}
		`});var ae=e(ee,2),we=t(ae);Le(we,{stroke:"#f9e2af",style:"width: 1.25rem;"}),h(),r(ae),h(4),r(G);var L=e(G,2);L.__click=l;var ye=t(L);m(ye,"src",Ge),h(),r(L);var j=e(L,2);j.__click=l;var _e=t(j);m(_e,"src",De),h(),r(j);var te=e(j,2),D=e(t(te),12),Ce=e(t(D),2);a(Ce,"margin-top","1rem"),r(D);var ke=e(D,2);y(ke,{children:(o,s)=>{var n=ra(),i=e(t(n),3);a(i,"color","#89b4fa");var p=e(i,2);a(p,"color","#9399b2");var b=e(p,4);a(b,"color","#9399b2"),a(b,"font-weight","bold"),h(),r(n),v(o,n)}}),r(te),B(()=>{a(T,"background",x(u)==="windows"?"#28283d":"#181825"),a(z,"background",x(u)==="mac"?"#28283d":"#181825"),a(R,"background",x(u)==="linux"?"#28283d":"#181825")}),v(c,d)},$$slots:{default:!0}})}Ie(["click"]);export{ma as component};
