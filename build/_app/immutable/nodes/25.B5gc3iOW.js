import"../chunks/CWj6FrbW.js";import"../chunks/69_IOA4Y.js";import{d as ae,g as m,A as ue,B as ne,e as Y,p as fe,I as z,C as re,D as F,m as ve,F as X,h as k,G as ge,H as me,J as _e,K as xe,M as we,N as be,O as Te,P as le,c as O,Q as De,R as ye,S as J,T as U,U as B,f as C,V as Re,W as oe,X as Ee,Y as Se,Z as ke,k as qe,v as R,w as E,y as P,r as Ce,$ as Ie,q as D,o as A,_ as Le,a0 as $e,z as Ae}from"../chunks/DneM_Zg5.js";import{s as W}from"../chunks/D4px5WjD.js";import{r as Me,i as j}from"../chunks/Bo_ZAIiv.js";import{e as K,f as Ne,t as I,a as T,n as Ge,d as je,b as Q,c as Z}from"../chunks/Ke2h0E31.js";import{h as Pe}from"../chunks/DhpMl-z_.js";import{a as He,s as Ve}from"../chunks/6RRCYBGn.js";import{S as ze}from"../chunks/Dfsqygma.js";import{S as Be}from"../chunks/C0fT2myZ.js";function ee(r,e){return e}function Oe(r,e,s,o){for(var u=[],d=e.length,i=0;i<d;i++)me(e[i].e,u,!0);var f=d>0&&u.length===0&&s!==null;if(f){var n=s.parentNode;_e(n),n.append(s),o.clear(),S(r,e[0].prev,e[d-1].next)}xe(u,()=>{for(var g=0;g<d;g++){var t=e[g];f||(o.delete(t.k),S(r,t.prev,t.next)),le(t.e,!f)}})}function te(r,e,s,o,u,d=null){var i=r,f={flags:e,items:new Map,first:null};k&&O();var n=null,g=!1,t=ue(()=>{var l=s();return De(l)?l:l==null?[]:re(l)});ae(()=>{var l=m(t),a=l.length;if(g&&a===0)return;g=a===0;let p=!1;if(k){var c=i.data===ye;c!==(a===0)&&(i=J(),U(i),B(!1),p=!0)}if(k){for(var x=null,w,h=0;h<a;h++){if(C.nodeType===8&&C.data===Re){i=C,p=!0,B(!1);break}var _=l[h],L=o(_,h);w=he(C,f,x,null,_,L,h,u,e,s),f.items.set(L,w),x=w}a>0&&U(J())}k||Ue(l,f,i,u,e,o,s),d!==null&&(a===0?n?ne(n):n=Y(()=>d(i)):n!==null&&fe(n,()=>{n=null})),p&&B(!0),m(t)}),k&&(i=C)}function Ue(r,e,s,o,u,d,i){var f=r.length,n=e.items,g=e.first,t=g,l,a=null,p=[],c=[],x,w,h,_;for(_=0;_<f;_+=1){if(x=r[_],w=d(x,_),h=n.get(w),h===void 0){var L=t?t.e.nodes_start:s;a=he(L,e,a,a===null?e.first:a.next,x,w,_,o,u,i),n.set(w,a),p=[],c=[],t=a.next;continue}if(We(h,x,_),(h.e.f&z)!==0&&ne(h.e),h!==t){if(l!==void 0&&l.has(h)){if(p.length<c.length){var $=c[0],y;a=$.prev;var M=p[0],N=p[p.length-1];for(y=0;y<p.length;y+=1)se(p[y],$,s);for(y=0;y<c.length;y+=1)l.delete(c[y]);S(e,M.prev,N.next),S(e,a,M),S(e,N,$),t=$,a=N,_-=1,p=[],c=[]}else l.delete(h),se(h,t,s),S(e,h.prev,h.next),S(e,h,a===null?e.first:a.next),S(e,a,h),a=h;continue}for(p=[],c=[];t!==null&&t.k!==w;)(t.e.f&z)===0&&(l??(l=new Set)).add(t),c.push(t),t=t.next;if(t===null)continue;h=t}p.push(h),a=h,t=h.next}if(t!==null||l!==void 0){for(var q=l===void 0?[]:re(l);t!==null;)(t.e.f&z)===0&&q.push(t),t=t.next;var H=q.length;if(H>0){var V=null;Oe(e,q,V,n)}}F.first=e.first&&e.first.e,F.last=a&&a.e}function We(r,e,s,o){ge(r.v,e),r.i=s}function he(r,e,s,o,u,d,i,f,n,g){var t=(n&be)!==0,l=(n&Te)===0,a=t?l?ve(u):X(u):u,p=(n&we)===0?i:X(i),c={i:p,v:a,k:d,a:null,e:null,prev:s,next:o};try{return c.e=Y(()=>f(r,a,p,g),k),c.e.prev=s&&s.e,c.e.next=o&&o.e,s===null?e.first=c:(s.next=c,s.e.next=c.e),o!==null&&(o.prev=c,o.e.prev=c.e),c}finally{}}function se(r,e,s){for(var o=r.next?r.next.e.nodes_start:s,u=e?e.e.nodes_start:s,d=r.e.nodes_start;d!==o;){var i=oe(d);u.before(d),d=i}}function S(r,e,s){e===null?r.first=s:(e.next=s,e.e.next=s&&s.e),s!==null&&(s.prev=e,s.e.prev=e&&e.e)}function ie(r,e,s,o,u){var d=r,i="",f;ae(()=>{if(i===(i=e()??"")){k&&O();return}f!==void 0&&(le(f),f=void 0),i!==""&&(f=Y(()=>{if(k){C.data;for(var n=O(),g=n;n!==null&&(n.nodeType!==8||n.data!=="");)g=n,n=oe(n);if(n===null)throw Ee(),Se;K(C,g),d=U(n);return}var t=i+"",l=Ne(t);K(ke(l),l.lastChild),d.before(l)}))})}var Ye=I('<code class="svelte-te4eze"><pre class="svelte-te4eze"> </pre></code>');function Fe(r,e){qe(e,!0);function s(i){i=i.replace(/^[\r\n]+/g,"").replace(/[\r\n]+\s*$/g,"").replace(/\t/g,"    ");let f=Math.min(...[...i.match(/^ +/gm)??[""]].map(n=>n.length));return i.replace(new RegExp(`^ {${f}}`,"gm"),"")}var o=Ye(),u=R(o),d=R(u,!0);E(u),E(o),P(i=>W(d,i),[()=>s(e.code)]),T(r,o),Ce()}var Xe=I('<p class="svelte-1ci1e74"><b>Warning:</b> This is a preview feature and not yet available</p>');function Je(r){var e=Xe();T(r,e)}var Ke=Ge('<svg><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><g><path d="M330.396,282.031L178.487,35.471c-2.504-4.074-6.96-6.555-11.736-6.555c-4.795,0-9.235,2.48-11.751,6.555L2.051,283.712 c-2.624,4.251-2.735,9.602-0.306,13.961c2.441,4.371,7.046,7.073,12.058,7.073h305.881c0.055-0.018,0.114-0.018,0.181,0 c7.62,0,13.799-6.19,13.799-13.799C333.669,287.543,332.438,284.445,330.396,282.031z M157.692,111.062h18.104v109.96h-18.104 V111.062z M175.695,261.243c-2.66,2.498-5.647,3.759-8.956,3.759c-3.303,0-6.285-1.261-8.948-3.759 c-2.651-2.534-3.978-5.579-3.978-9.182c0-3.585,1.261-6.629,3.774-9.157c2.504-2.511,5.554-3.771,9.152-3.771 c3.584,0,6.656,1.261,9.172,3.771c2.504,2.528,3.771,5.572,3.771,9.157C179.683,255.664,178.337,258.708,175.695,261.243z"></path></g></g></svg>');function Qe(r,e){let s=Me(e,["$$slots","$$events","$$legacy","stroke"]);var o=Ke();let u;P(()=>u=He(o,u,{...s,fill:e.stroke,version:"1.1",id:"Capa_1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 333.663 333.663","xml:space":"preserve"},void 0,!0)),T(r,o)}var Ze=I(`<pre>let text = "hello!"; # instance of Text
</pre>`),et=I("<h3>Example:</h3> <!>",1),tt=I('<hr> <span class="svelte-jtwiq9"><!> <h2 class="svelte-jtwiq9"><code class="svelte-jtwiq9"> </code></h2> <button class="detail-button svelte-jtwiq9"><!></button></span> <!> <p><!></p> <!>',1),st=I('<hr> <h2 class="svelte-jtwiq9"><code class="svelte-jtwiq9"> </code></h2>',1),it=I(`<h1 id="text"><code class="svelte-jtwiq9">Text</code></h1> <p><code class="svelte-jtwiq9">Text</code> is Cabin's equivalent to <code class="svelte-jtwiq9">String</code> in most languages. It represents... well, text. <code class="svelte-jtwiq9">Text</code> is a group, but it's a special group that can't be instantiated with the standard <code class="svelte-jtwiq9">new</code> syntax; Instead, quoted text literals are used to instantiate it:</p> <!> <h2 id="properties">Properties</h2> <!> <hr> <h2 id="extensions">Extensions</h2> <!> <hr>`,1);function ft(r){const e=$e([{signature:"bytes: action(this: This): Number",id:"bytes",shortDescription:"Gets the length of the string, in bytes.",longDescription:'Gets the length of the string, in bytes. To get the length of the string in graphemes, use <a href="#text-byte_count"><code>length()</code></a>.',example:`"hello!".length(); # 5
"😀😘😁".length(); # 6`,preview:!0,expanded:!1},{signature:"ends_with: action(this: This, pattern: This): Boolean",id:"ends_with",shortDescription:"Returns whether this text ends with the given suffix.",longDescription:"Returns whether this text ends with the givent suffix. If the given suffix is empty, this returns <code>true</code>, even if this text being checked is empty as well.",example:`"hello!".length(); # 5
"😀😘😁".length(); # 3`,preview:!0,expanded:!1},{signature:"length: action(this: This): Number",id:"length",shortDescription:"Gets the length of the string, in graphemes.",longDescription:'Gets the length of the string, in graphemes. Graphemes are what you can think of as a single "character", including regular ASCII characters, emojis, and other unicode characters; These all count as one unit in the length calculation. To get the length of the string in bytes, use <a href="#text-byte_count"><code>bytes()</code></a>.',example:`"hello!".length(); # 5
"😀😘😁".length(); # 3`,preview:!0,expanded:!1},{signature:"lines: action(this: This): List<This>",id:"lines",shortDescription:"Splits this text into lines.",longDescription:'Splits this text into lines. Equivalent to <code>text.split_where(["\\r", "\\n"])</code>',example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"replace: action(this: This, pattern: This, replacement: This): List<This>",id:"replace",shortDescription:"Replaces substrings with a given replacement.",longDescription:"Replaces all occurrences of <code>pattern</code> with <code>replacement</code>.",example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"split: action(this: This): List<This>",id:"split",shortDescription:"Splits this text by whitespace.",longDescription:"Splits this text by whitespace, returning the result as a list of substrings, without including the delimiters.",example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"split_any: action(this: This, delimiters: List<This>): List<This>",id:"split_any",shortDescription:"Splits this text by the given delimiters.",longDescription:"Splits this text by whitespace, returning the result as a list of substrings, without including the delimiters.",example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"starts_with: action(this: This, pattern: This): Boolean",id:"starts_with",shortDescription:"Returns whether this text starts with the given prefix.",longDescription:"Returns whether this text starts with the givent prefix. If the given prefix is empty, this returns <code>true</code>, even if this text being checked is empty as well.",example:`"hello!".length(); # 5
"😀😘😁".length(); # 3`,preview:!0,expanded:!1},{signature:"trim: action(this: This): This",id:"trim",shortDescription:"Removes whitespace from the beginning and end of this text.",longDescription:'Splits this text into lines. Equivalent to <code>text.split_where(["\\r", "\\n"])</code>',example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1},{signature:"trim_end: action(this: This): This",id:"trim_end",shortDescription:"Removes whitespace from the end of this text.",longDescription:'Removes all whitespace from the end of this text, as defined in <a href="https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt">the Unicode whitespace spec</a>. This includes spaces, tabs, newlines, carriage returns, and other unicode characters considered "whitespace". All such characters at the <i>end</i> of this text are removed.',example:'"  he was just 14    \\n\\r".trim_end(); # "  he was just 14"',preview:!0,expanded:!1},{signature:"trim_start: action(this: This): This",id:"trim_start",shortDescription:"Removes whitespace from the beginning of this text.",longDescription:'Splits this text into lines. Equivalent to <code>text.split_where(["\\r", "\\n"])</code>',example:'"hes a    phantom".split(); # ["hes", "a", "phantom"]',preview:!0,expanded:!1}]),s=[{signature:"extend Text tobe List<Letter>"},{signature:"extend Text tobe Addable"}];Pe(o=>{Ie.title="Standard Library  •  Cabin Docs"}),Be(r,{page:"Text",children:(o,u)=>{var d=it(),i=D(A(d),4);ze(i,{children:(g,t)=>{var l=Ze();T(g,l)}});var f=D(i,4);te(f,1,()=>m(e),ee,(g,t,l)=>{var a=tt(),p=D(A(a),2),c=R(p);Qe(c,{stroke:"#f9e2af",style:"width: 1rem; height: 1rem;"});var x=D(c,2),w=R(x),h=R(w,!0);E(w),E(x);var _=D(x,2);_.__click=()=>(m(t).expanded=!m(t).expanded,Le(()=>m(e)));var L=R(_);{var $=v=>{var b=Q("Less");T(v,b)},y=v=>{var b=Q("More");T(v,b)};j(L,v=>{m(t).expanded?v($):v(y,!1)})}E(_),E(p);var M=D(p,2);{var N=v=>{Je(v)};j(M,v=>{m(t).expanded&&m(t).preview&&v(N)})}var q=D(M,2),H=R(q);{var V=v=>{var b=Z(),G=A(b);ie(G,()=>m(t).longDescription),T(v,b)},ce=v=>{var b=Z(),G=A(b);ie(G,()=>m(t).shortDescription),T(v,b)};j(H,v=>{m(t).expanded?v(V):v(ce,!1)})}E(q);var de=D(q,2);{var pe=v=>{var b=et(),G=D(A(b),2);Fe(G,{get code(){return m(t).example}}),T(v,b)};j(de,v=>{m(t).expanded&&v(pe)})}P(()=>{Ve(x,"id",m(t).id),W(h,m(t).signature)}),T(g,a)});var n=D(f,6);te(n,1,()=>s,ee,(g,t)=>{var l=st(),a=D(A(l),2),p=R(a),c=R(p,!0);E(p),E(a),P(()=>W(c,m(t).signature)),T(g,l)}),Ae(2),T(o,d)},$$slots:{default:!0}})}je(["click"]);export{ft as component};
